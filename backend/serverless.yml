service: api-resources-dapp-betterfield
frameworkVersion: '3'

plugins:
 - serverless-api-cloudfront
 - serverless-offline  # should be last in list

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 20
  region: eu-west-3
  endpointType: REGIONAL
  memorySize: 256
  versionFunctions: false
  apiGateway:
    minimumCompressionSize: 1400
  stackTags:
    SERVICE: ${self:service}-${sls:stage}
  environment:
    DEBUG: 'api.resources-dapp.betterfield:*'
    DEBUG_DEPTH: 5
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    CLOUDFRONT_DOMAIN: ${env:CLOUDFRONT_DOMAIN}
    ACM_CERTIFICATE_ARN: ${env:ACM_CERTIFICATE_ARN}
    S3_BUCKET_NAME: ${self:custom.s3Bucket}
    STAGE: ${sls:stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - s3:PutObjectAcl
        - s3:ListBucket # Needed for headObject
      Resource:
        - arn:aws:s3:::${self:custom.s3Bucket}  # Needed for headObject
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource:
        - '*'


functions:
  api:
    handler: index.handler
    events:
      - http: 
          method: any
          path: /api/{proxy+}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

custom:
  s3Bucket: ${self:service}-${sls:stage}-bucket
  apiCloudFront:
    domain: ${env:CLOUDFRONT_DOMAIN}
    certificate: ${env:ACM_CERTIFICATE_ARN}
    compress: false
    cookies: none
    priceClass: PriceClass_100
    minimumProtocolVersion: TLSv1
